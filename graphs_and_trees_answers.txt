1. A binary tree is a data structure in which each node may point to a left child and a right child. A binary tree may only have two children on each node (hence the binary). Other tree structures may have more children. 

2. A heuristic is a technique in which developers use their best, educated guess to solve a problem. It is a “good enough” and “fast” enough solution, though it may not always be the optimal solution 100% of the time.

3. Another problem besides the shortest-path problem would be determining the best possible route for a chess piece to move across a chess board. You could use heuristics to determine how many moves are possible and then choose the best one based on the end goal of reaching the end (king).

4. A depth-first search (DRS) visits all the nodes on each branch of a binary search tree before it returns to the root note and then begins checking the other branches. A breadth-first search (BRS) searches an entire row of nodes before searching the next level. This starts at the root node, which may have up to two nodes, then moves to the next level. The number of nodes increases at each level.

5. An undirected graph means that data can travel in both directions. A-cyclic means that the graph does not form any loops. And unweighted means there is not cost of travel assigned to traveling between nodes. An example of an undirected, a-cyclic, unweighted graph would be a tree.

6. A-cyclic, unweighted, undirected

7.
FUNCTION searchTree(but) {
  START at rootNode
	currentNode = rootNode
  WHILE currentNode is not null
	IF the queryNode is equal to the currentNode
		RETURN true
	ELSE if queryNode is less than currentNode
		currentNode = currentNode.left
       ELSE if queryNode is greater than currentNode
		currentNode = currentNode.right
  REPEAT the loop to check queryNode against all nodes
  IF no nodes match queryNode
	RETURN false
END FUNCTION

class Node {
  constructor(value, left = null, right = null) {
    this.value = value;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }
  add(value) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(value);
      return;
    } else {
      const searchTree = function(node) {
        if (value < node.value) {
          if (node.left === null) {
            node.left = new Node(value);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (value > node.value) {
          if (node.right === null) {
            node.right = new Node(value);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }

  isPresent(value) {
    let current = this.root;
    while (current) {
      if (value === current.value) {
        return true;
      }
      if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
} 

var bst = new BST();

bst.add(10);
bst.add(20);
bst.add(45);
bst.add(-6);
bst.add(2200);
bst.add(1);
bst.add(17);
bst.add(99);
bst.add(73);

console.log(bst.isPresent(-6)); // returns true

8. 

var bst = new BST();

function findPath(node, target, num = 0) {
    if (!node) {
        return 0;
    }
    if (node.val === target) {
        return num;
    }
    return findPath(node.left, target, num + 1) || findPath(node.right, target, num + 1);
}

function lowestCommonAncestor(node, x, y) {
    if (!node || node.val === x || node.val === y) {
        return node;
    }
    const left = lowestCommonAncestor(node.left, x, y);
    const right = lowestCommonAncestor(node.right, x, y);
    return left && right ? node : (left || right);
}

function findDistance(bst, x, y) {
    const LCA = lowestCommonAncestor(bst, x, y);
    return findPath(LCA, x) + findPath(LCA, y);
}	

findDistance(bst, 4, 14);

